{"name":"P2pstream","tagline":"","body":"# p2pstream\r\nThis project is a peer to peer live streaming application software that uses centralized peer to\r\npeer architecture operating on an unstructured network topology. It is implemented in c++ using raw c++ sockets and uses pthread library for `Multithreading`.\r\np2pstream uses `peer-to-peer` paradigm on top of the `client-server` model which explains how a peer is both a client and a server. \r\n\r\n### Installation : \r\n\t git clone https://github.com/adiitya/p2pstream.git\r\n\t cd ./p2pstream\r\n\t make\r\n_Note_: libvlc, SFML, pthread libraries should be installed before installing this.\r\n### How it works: \r\n1. Start the centralServer - The backbone of the model.\r\n```sh\r\n        ./central <Own_IP/IP_of_central_server>\r\n```\r\n2. Start the Peer(Client + Server)\r\n```sh\r\n\t\t./server <Own_IP>\r\n\t\t./client <IP_of_centralServer>\r\n```\t\t\r\n_Note :_ For now the user need to manually enter the the File to IP mapping (i.e Name of file ---> IP address of peers having the file - space separated).\r\n### Architecture\r\n#### Model: \r\n* A central server listening for any request for a file from any peer(Client). It responds with the IP addresses of all the peers having the requested file, by looking up a map of file to IPs. While responding \r\n\r\n* The client then connects to these peers and starts downloading. \r\n\r\n* The peers online when requested for a file, responds with the file. _A peer can serve multiple peers at the same time and can also download packets for streaming for itself._\r\n\r\n### Classes\r\np2pstream uses OOP paradigm.\r\n\r\n##### These are the core classes used by all the peer classes\r\n`Connection` class is used by all the peers to establish connection with central-server or any other other peer. \r\n* When a peer wants to connect to another peer, this class needs the IP address and port of the peer to connect and create a connection object. \r\n* Since a peer can act as both clinet/server so,  when a peer is listening for connections( Server part of a peer),the class takes a sockid as argument and creates a connection object with that peer for futher interactions. This peer can serve other peers on a different `thread` at the same time.\r\n\r\nThe `Data` class handles all the work related to reading and writing data:\r\n\r\n`Data` will always transferred as stream of bytes. During sending/receiving it may be either a string (Eg. while searching for contents over various peers like movie or content name or any query to central server) or it can be a file to be downloaded or uploaded. \r\nSo we have two derived data classes : `BufferData` and `FileData` inheriting Data class: \r\nSo for sending or recieving as string we create a bufferData class object\r\n```cpp \r\n\tData* dataObj = new BufferData(char_array, size_of_array);\r\n```\r\nAnd for sedning and recieving on or from a file simply creating a FileData object.\r\n```cpp \r\n    Data* dataObj = new FileData(name_of_file, FileData::FTYPE::READ);\r\n```\r\nFor reading and writing we just need to call the same functions of the Data class(The parent class)\r\nFor sending or receiving, we will use the object of the `connection` class which takes as argument a `Data` object. So basically it can take any of the two data types defined above and handles them accordingly.\r\n\r\n#### UML Diagram\r\n![uml classes](http://i.imgur.com/EI1FBSZ.jpg?1)\r\n\r\n#### Implementation\r\n* p2pstream is implemented using raw C++ sockets.\r\n* It uses `pthread` library for Multithreading.\r\n* It uses `libvlc` for processing the data-received.\r\n* `SFML` is used for rendering the interface.\r\n\r\n#### Demo\r\n1. Request by one `Peer` with IP of central-server(Peer asked for the file to be downloaded):\r\n![client](http://i.imgur.com/9j3mOpq.png?1)\r\n2. Response by `central-server` with the list of IPs having file:\r\n![central](http://i.imgur.com/pmTBVME.png?1)\r\n3. Response by another `peer` with the file:\r\n![server](http://i.imgur.com/slT6joq.png?1)\r\nThe test was successful with a `peer` serving `multiple peers` and downloading packets at the same time.\r\n4. Streaming video in `SFML Player`\r\n![screen](http://i.imgur.com/dR3yNF5.png)\r\n\r\n### Contribution\r\nFeel free to file [issues](https://github.com/adiitya/p2pstream/issues) and submit [pull requests](https://github.com/adiitya/p2pstream/pulls) â€“ contributions are welcome.\r\n\r\n### License:\r\np2pstream is licensed under the [MIT License](http://aditya.mit-license.org).\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}